[
  {
    "timestamp": 1723874174772,
    "event": "suggestion",
    "code": "#"
  },
  {
    "timestamp": 1723874177827,
    "event": "suggestion",
    "code": "Sugges"
  },
  {
    "timestamp": 1723874180121,
    "event": "suggestion",
    "code": "tion to "
  },
  {
    "timestamp": 1723874194584,
    "event": "suggestion",
    "code": "use selenium code opening the browser "
  },
  {
    "timestamp": 1723874196692,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723874197624,
    "event": "acceptance",
    "code": "#Suggestion to use selenium code opening the browser \n"
  },
  {
    "timestamp": 1723874240661,
    "event": "suggestion",
    "code": "\ndef"
  },
  {
    "timestamp": 1723874243059,
    "event": "suggestion",
    "code": " def test():\n    print(\"Hello World\")\n    return 0"
  },
  {
    "timestamp": 1723874243097,
    "event": "acceptance",
    "code": "#Suggestion to use selenium code opening the browser \ndef test():\n    print(\"Hello World\")\n    return 0"
  },
  {
    "timestamp": 1723874245005,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723874245225,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723874246819,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723874247825,
    "event": "suggestion",
    "code": "\n    \nif __name__ == \"__main__\":\n    "
  },
  {
    "timestamp": 1723874250696,
    "event": "suggestion",
    "code": "    test()"
  },
  {
    "timestamp": 1723874251264,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723874251417,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723874254613,
    "event": "suggestion",
    "code": "\n    \n    re"
  },
  {
    "timestamp": 1723874256603,
    "event": "suggestion",
    "code": "return"
  },
  {
    "timestamp": 1723874256959,
    "event": "acceptance",
    "code": "#Suggestion to use selenium code opening the browser \ndef test():\n    print(\"Hello World\")\n    return 0\n\nif __name__ == \"__main__\":\n    test()\n\n    return"
  },
  {
    "timestamp": 1723874434441,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723874434612,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723874444783,
    "event": "suggestion",
    "code": "\n    \n#     main()"
  },
  {
    "timestamp": 1723874583180,
    "event": "suggestion",
    "code": "/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json"
  },
  {
    "timestamp": 1723874585700,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, events_by_date):\n    # Calculate productivity percentage\n    total_events = counts['acceptance'] + counts['suggestion']\n    if total_events > 0:\n        productivity = (counts['acceptance'] / total_events) * 100\n    else:\n        productivity = 0\n\n    # Define bar widths based on event counts\n    max_width = 400  # Maximum width for the bars in pixels\n    acceptance_width = (counts['acceptance'] / total_events * max_width) if total_events > 0 else 0\n    suggestion_width = (counts['suggestion'] / total_events * max_width) if total_events > 0 else 0\n\n    # Generate HTML content with CSS-styled bars\n    \n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {acceptance_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {suggestion_width}px;\n            }}\n            .productivity {{\n                margin-top: 20px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Acceptance Events: {counts['acceptance']}</p>\n            <p>Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {counts['acceptance'] + counts['suggestion']}</p>\n            <p>Productivity: {productivity:.2f}%</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n            <div class=\"event-category\">\n                <h3>Acceptance</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['acceptance'].items())}\n                </ul>\n            </div>\n            <div class=\"event-category\">\n                <h3>Suggestion</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['suggestion'].items())}\n                </ul>\n            </div>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n    \n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\n\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723874796252,
    "event": "suggestion",
    "code": "import logging\n\n# Configure the logging settings\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Create a logger instance\nlogger = logging.getLogger(__name__)\n\ndef log_suggestion_event(user_id, suggestion):\n    \"\"\"\n    Logs a suggestion event.\n\n    Parameters:\n    user_id (str): The ID of the user making the suggestion.\n    suggestion (str): The suggestion text.\n    \"\"\"\n    event = {\n        'event': 'suggestion',\n        'user_id': user_id,\n        'suggestion': suggestion\n    }\n    logger.info(f\"Suggestion Event: {event}\")\n\n# Example usage\nlog_suggestion_event('user123', 'Add a dark mode feature.')"
  },
  {
    "timestamp": 1723874899826,
    "event": "suggestion",
    "code": "}}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n            .productivity-graph {{\n                margin-top: 20px;\n            }}\n            .productivity-bar {{\n                width: 100%;\n                background-color: #f3f3f3;\n                margin-bottom: 10px;\n                position: relative;\n            }}\n            .productivity-bar span {{\n                display: block;\n                height: 20px;\n                background-color: #4caf50;\n                text-align: right;\n                padding-right: 5px;\n                color: white;\n                line-height: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Acceptance Events: {counts['acceptance']}</p>\n            <p>Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {counts['acceptance'] + counts['suggestion']}</p>\n            <p>Productivity: {productivity:.2f}%</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n            <div class=\"event-category\">\n                <h3>Acceptance</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['acceptance'].items())}\n            </div>\n        </div>\n        <div class=\"productivity-graph\">\n            <h2>Productivity by Date</h2>\n            {\"\".join(f'''\n            <div class=\"productivity-bar\">\n                <span style=\"width: {productivity_by_date[date]:.2f}%;\">{date}: {productivity_by_date[date]:.2f}%</span>\n            </div>\n            ''' for date in productivity_by_date)}\n        </div>"
  },
  {
    "timestamp": 1723874909245,
    "event": "suggestion",
    "code": "    }}\n                .event-category {{\n                    margin-bottom: 20px;\n                }}\n                .productivity-graph {{\n                    margin-top: 20px;\n                }}\n                .productivity-bar {{\n                    width: 100%;\n                    background-color: #f3f3f3;\n                    margin-bottom: 10px;\n                    position: relative;\n                }}\n                .productivity-bar span {{\n                    display: block;\n                    height: 20px;\n                    background-color: #4caf50;\n                    text-align: right;\n                    padding-right: 5px;\n                    color: white;\n                    line-height: 20px;\n                }}\n            </style>\n        </head>\n        <body>\n            <h1>Event Statistics</h1>\n            <div class=\"chart-container\">\n                <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n                <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            </div>\n            <div class=\"productivity\">\n                <h2>Productivity</h2>\n                <p>Acceptance Events: {counts['acceptance']}</p>\n                <p>Suggestion Events: {counts['suggestion']}</p>\n                <p>Total Events: {counts['acceptance'] + counts['suggestion']}</p>\n                <p>Productivity: {productivity:.2f}%</p>\n            </div>\n            <div class=\"events\">\n                <h2>Events by Date</h2>\n                <div class=\"event-category\">\n                    <h3>Acceptance</h3>\n                    <ul>\n                        {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['acceptance'].items())}\n                </div>\n            </div>\n            <div class=\"productivity-graph\">\n                <h2>Productivity by Date</h2>\n                {\"\".join(f'''\n                <div class=\"productivity-bar\">\n                    <span style=\"width: {productivity_by_date[date]:.2f}%;\">{date}: {productivity_by_date[date]:.2f}%</span>\n                </div>\n                ''' for date in productivity_by_date)}\n            </div>"
  },
  {
    "timestamp": 1723874922076,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, events_by_date):\n    # Calculate productivity percentage\n    total_events = counts['acceptance'] + counts['suggestion']\n    if total_events > 0:\n        productivity = (counts['acceptance'] / total_events) * 100\n    else:\n        productivity = 0\n\n    # Define bar widths based on event counts\n    max_width = 400  # Maximum width for the bars in pixels\n    acceptance_width = (counts['acceptance'] / total_events * max_width) if total_events > 0 else 0\n    suggestion_width = (counts['suggestion'] / total_events * max_width) if total_events > 0 else 0\n\n    # Generate HTML content with CSS-styled bars\n    \n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {acceptance_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {suggestion_width}px;\n            }}\n            .productivity {{\n                margin-top: 20px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Acceptance Events: {counts['acceptance']}</p>\n            <p>Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {counts['acceptance'] + counts['suggestion']}</p>\n            <p>Productivity: {productivity:.2f}%</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n            <div class=\"event-category\">\n                <h3>Acceptance</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['acceptance'].items())}\n                </ul>\n            </div>\n            <div class=\"event-category\">\n                <h3>Suggestion</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['suggestion'].items())}\n                </ul>\n            </div>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n    \n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\n\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json    }}\n                .event-category {{\n                    margin-bottom: 20px;\n                }}\n                .productivity-graph {{\n                    margin-top: 20px;\n                }}\n                .productivity-bar {{\n                    width: 100%;\n                    background-color: #f3f3f3;\n                    margin-bottom: 10px;\n                    position: relative;\n                }}\n                .productivity-bar span {{\n                    display: block;\n                    height: 20px;\n                    background-color: #4caf50;\n                    text-align: right;\n                    padding-right: 5px;\n                    color: white;\n                    line-height: 20px;\n                }}\n            </style>\n        </head>\n        <body>\n            <h1>Event Statistics</h1>\n            <div class=\"chart-container\">\n                <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n                <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            </div>\n            <div class=\"productivity\">\n                <h2>Productivity</h2>\n                <p>Acceptance Events: {counts['acceptance']}</p>\n                <p>Suggestion Events: {counts['suggestion']}</p>\n                <p>Total Events: {counts['acceptance'] + counts['suggestion']}</p>\n                <p>Productivity: {productivity:.2f}%</p>\n            </div>\n            <div class=\"events\">\n                <h2>Events by Date</h2>\n                <div class=\"event-category\">\n                    <h3>Acceptance</h3>\n                    <ul>\n                        {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['acceptance'].items())}\n                </div>\n            </div>\n            <div class=\"productivity-graph\">\n                <h2>Productivity by Date</h2>\n                {\"\".join(f'''\n                <div class=\"productivity-bar\">\n                    <span style=\"width: {productivity_by_date[date]:.2f}%;\">{date}: {productivity_by_date[date]:.2f}%</span>\n                </div>\n                ''' for date in productivity_by_date)}\n            </div>'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723874924260,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, events_by_date):\n    # Calculate productivity percentage\n    total_events = counts['acceptance'] + counts['suggestion']\n    if total_events > 0:\n        productivity = (counts['acceptance'] / total_events) * 100\n    else:\n        productivity = 0\n\n    # Define bar widths based on event counts\n    max_width = 400  # Maximum width for the bars in pixels\n    acceptance_width = (counts['acceptance'] / total_events * max_width) if total_events > 0 else 0\n    suggestion_width = (counts['suggestion'] / total_events * max_width) if total_events > 0 else 0\n\n    # Generate HTML content with CSS-styled bars\n    \n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {acceptance_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {suggestion_width}px;\n            }}\n            .productivity {{\n                margin-top: 20px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Acceptance Events: {counts['acceptance']}</p>\n            <p>Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {counts['acceptance'] + counts['suggestion']}</p>\n            <p>Productivity: {productivity:.2f}%</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n            <div class=\"event-category\">\n                <h3>Acceptance</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['acceptance'].items())}\n                </ul>\n            </div>\n            <div class=\"event-category\">\n                <h3>Suggestion</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['suggestion'].items())}\n                </ul>\n            </div>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n    \n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\n\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json    }}\n                .event-category {{\n                    margin-bottom: 20px;\n                }}\n                .productivity-graph {{\n                    margin-top: 20px;\n                }}\n                .productivity-bar {{\n                    width: 100%;\n                    background-color: #f3f3f3;\n                    margin-bottom: 10px;\n                    position: relative;\n                }}\n                .productivity-bar span {{\n                    display: block;\n                    height: 20px;\n                    background-color: #4caf50;\n                    text-align: right;\n                    padding-right: 5px;\n                    color: white;\n                    line-height: 20px;\n                }}\n            </style>\n        </head>\n        <body>\n            <h1>Event Statistics</h1>\n            <div class=\"chart-container\">\n                <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n                <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            </div>\n            <div class=\"productivity\">\n                <h2>Productivity</h2>\n                <p>Acceptance Events: {counts['acceptance']}</p>\n                <p>Suggestion Events: {counts['suggestion']}</p>\n                <p>Total Events: {counts['acceptance'] + counts['suggestion']}</p>\n                <p>Productivity: {productivity:.2f}%</p>\n            </div>\n            <div class=\"events\">\n                <h2>Events by Date</h2>\n                <div class=\"event-category\">\n                    <h3>Acceptance</h3>\n                    <ul>\n                        {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['acceptance'].items())}\n                </div>\n            </div>\n            <div class=\"productivity-graph\">\n                <h2>Productivity by Date</h2>\n                {\"\".join(f'''\n                <div class=\"productivity-bar\">\n                    <span style=\"width: {productivity_by_date[date]:.2f}%;\">{date}: {productivity_by_date[date]:.2f}%</span>\n                </div>\n                ''' for date in productivity_by_date)}\n            </div>'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723874924837,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, events_by_date):\n    # Calculate productivity percentage\n    total_events = counts['acceptance'] + counts['suggestion']\n    if total_events > 0:\n        productivity = (counts['acceptance'] / total_events) * 100\n    else:\n        productivity = 0\n\n    # Define bar widths based on event counts\n    max_width = 400  # Maximum width for the bars in pixels\n    acceptance_width = (counts['acceptance'] / total_events * max_width) if total_events > 0 else 0\n    suggestion_width = (counts['suggestion'] / total_events * max_width) if total_events > 0 else 0\n\n    # Generate HTML content with CSS-styled bars\n    \n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {acceptance_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {suggestion_width}px;\n            }}\n            .productivity {{\n                margin-top: 20px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Acceptance Events: {counts['acceptance']}</p>\n            <p>Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {counts['acceptance'] + counts['suggestion']}</p>\n            <p>Productivity: {productivity:.2f}%</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n            <div class=\"event-category\">\n                <h3>Acceptance</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['acceptance'].items())}\n                </ul>\n            </div>\n            <div class=\"event-category\">\n                <h3>Suggestion</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['suggestion'].items())}\n                </ul>\n            </div>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n    \n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\n\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json    }}\n                .event-category {{\n                    margin-bottom: 20px;\n                }}\n                .productivity-graph {{\n                    margin-top: 20px;\n                }}\n                .productivity-bar {{\n                    width: 100%;\n                    background-color: #f3f3f3;\n                    margin-bottom: 10px;\n                    position: relative;\n                }}\n                .productivity-bar span {{\n                    display: block;\n                    height: 20px;\n                    background-color: #4caf50;\n                    text-align: right;\n                    padding-right: 5px;\n                    color: white;\n                    line-height: 20px;\n                }}\n            </style>\n        </head>\n        <body>\n            <h1>Event Statistics</h1>\n            <div class=\"chart-container\">\n                <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n                <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            </div>\n            <div class=\"productivity\">\n                <h2>Productivity</h2>\n                <p>Acceptance Events: {counts['acceptance']}</p>\n                <p>Suggestion Events: {counts['suggestion']}</p>\n                <p>Total Events: {counts['acceptance'] + counts['suggestion']}</p>\n                <p>Productivity: {productivity:.2f}%</p>\n            </div>\n            <div class=\"events\">\n                <h2>Events by Date</h2>\n                <div class=\"event-category\">\n                    <h3>Acceptance</h3>\n                    <ul>\n                        {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['acceptance'].items())}\n                </div>\n            </div>\n            <div class=\"productivity-graph\">\n                <h2>Productivity by Date</h2>\n                {\"\".join(f'''\n                <div class=\"productivity-bar\">\n                    <span style=\"width: {productivity_by_date[date]:.2f}%;\">{date}: {productivity_by_date[date]:.2f}%</span>\n                </div>\n                ''' for date in productivity_by_date)}\n            </div>'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723874934428,
    "event": "suggestion",
    "code": "suggestion"
  },
  {
    "timestamp": 1723874953623,
    "event": "suggestion",
    "code": "/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json"
  },
  {
    "timestamp": 1723874953970,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, events_by_date):\n    # Calculate productivity percentage\n    total_events = counts['acceptance'] + counts['suggestion']\n    if total_events > 0:\n        productivity = (counts['acceptance'] / total_events) * 100\n    else:\n        productivity = 0\n\n    # Define bar widths based on event counts\n    max_width = 400  # Maximum width for the bars in pixels\n    acceptance_width = (counts['acceptance'] / total_events * max_width) if total_events > 0 else 0\n    suggestion_width = (counts['suggestion'] / total_events * max_width) if total_events > 0 else 0\n\n    # Generate HTML content with CSS-styled bars\n    \n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {acceptance_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {suggestion_width}px;\n            }}\n            .productivity {{\n                margin-top: 20px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Acceptance Events: {counts['acceptance']}</p>\n            <p>Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {counts['acceptance'] + counts['suggestion']}</p>\n            <p>Productivity: {productivity:.2f}%</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n            <div class=\"event-category\">\n                <h3>Acceptance</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['acceptance'].items())}\n                </ul>\n            </div>\n            <div class=\"event-category\">\n                <h3>Suggestion</h3>\n                <ul>\n                    {\"\".join(f\"<li>{date}: {count} events</li>\" for date, count in events_by_date['suggestion'].items())}\n                </ul>\n            </div>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n    \n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\n\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875121173,
    "event": "suggestion",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = (events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0))\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875130385,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = (events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0))\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875489470,
    "event": "suggestion",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON, count events, and calculate total characters\ndef count_events_and_chars(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    chars = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code = entry['code']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            chars[event_type] += len(code)  # Count characters in the code\n            \n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, chars, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, chars, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Acceptance Events: {counts['acceptance']}</p>\n            <p>Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Chars (Acceptance): {chars['acceptance']}</p>\n            <p>Total Chars (Suggestion): {chars['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = (events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0))\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, chars, events_by_date = count_events_and_chars(json_file_path)\n    generate_html(html_file_path, counts, chars, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875489881,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON, count events, and calculate total characters\ndef count_events_and_chars(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    chars = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code = entry['code']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            chars[event_type] += len(code)  # Count characters in the code\n            \n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, chars, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, chars, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Acceptance Events: {counts['acceptance']}</p>\n            <p>Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Chars (Acceptance): {chars['acceptance']}</p>\n            <p>Total Chars (Suggestion): {chars['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = (events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0))\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, chars, events_by_date = count_events_and_chars(json_file_path)\n    generate_html(html_file_path, counts, chars, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875556265,
    "event": "suggestion",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = (events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0))\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875557344,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = (events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0))\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875711633,
    "event": "suggestion",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code_lines = entry['code'].count('\\n') + 1  # Count lines of code\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = {'count': 0, 'lines': 0}\n            events_by_date[event_type][date_str]['count'] += 1\n            events_by_date[event_type][date_str]['lines'] += code_lines\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Total Acceptance Events: {counts['acceptance']}</p>\n            <p>Total Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875712445,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code_lines = entry['code'].count('\\n') + 1  # Count lines of code\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = {'count': 0, 'lines': 0}\n            events_by_date[event_type][date_str]['count'] += 1\n            events_by_date[event_type][date_str]['lines'] += code_lines\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Total Acceptance Events: {counts['acceptance']}</p>\n            <p>Total Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875855510,
    "event": "suggestion",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code_lines = entry['code'].count('\\n') + 1  # Count lines of code\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = {'count': 0, 'lines': 0}\n            events_by_date[event_type][date_str]['count'] += 1\n            events_by_date[event_type][date_str]['lines'] += code_lines\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Total Acceptance Events: {counts['acceptance']}</p>\n            <p>Total Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875856605,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code_lines = entry['code'].count('\\n') + 1  # Count lines of code\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = {'count': 0, 'lines': 0}\n            events_by_date[event_type][date_str]['count'] += 1\n            events_by_date[event_type][date_str]['lines'] += code_lines\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Total Acceptance Events: {counts['acceptance']}</p>\n            <p>Total Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723875920737,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code_lines = entry['code'].count('\\n') + 1  # Count lines of code\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = {'count': 0, 'lines': 0}\n            events_by_date[event_type][date_str]['count'] += 1\n            events_by_date[event_type][date_str]['lines'] += code_lines\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Total Acceptance Events: {counts['acceptance']}</p>\n            <p>Total Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723876009730,
    "event": "suggestion",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%</div>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876009918,
    "event": "acceptance",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%</div>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876039016,
    "event": "suggestion",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%</div>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876039315,
    "event": "acceptance",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%</div>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876157647,
    "event": "suggestion",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                padding: 20px;\n                display: flex;\n                justify-content: space-between;\n            }}\n            .chart-container {{\n                width: 60%;\n                text-align: left;\n            }}\n            .productivity-container {{\n                width: 35%;\n                text-align: left;\n                padding-right: 20px;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <div class=\"productivity-container\">\n            <h1>Productivity Information</h1>\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%</div>\n        </div>\n        <div class=\"chart-container\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'].get(date, {'count': 0, 'lines': 0})['count'] + events_by_date['suggestion'].get(date, {'count': 0, 'lines': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, {'count': 0})['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'].get(date, {'lines': 0})['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876157817,
    "event": "acceptance",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                padding: 20px;\n                display: flex;\n                justify-content: space-between;\n            }}\n            .chart-container {{\n                width: 60%;\n                text-align: left;\n            }}\n            .productivity-container {{\n                width: 35%;\n                text-align: left;\n                padding-right: 20px;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <div class=\"productivity-container\">\n            <h1>Productivity Information</h1>\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%</div>\n        </div>\n        <div class=\"chart-container\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'].get(date, {'count': 0, 'lines': 0})['count'] + events_by_date['suggestion'].get(date, {'count': 0, 'lines': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, {'count': 0})['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'].get(date, {'lines': 0})['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876220156,
    "event": "suggestion",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                padding: 20px;\n                display: flex;\n                justify-content: space-between;\n            }}\n            .chart-container {{\n                width: 60%;\n                text-align: left;\n            }}\n            .productivity-container {{\n                width: 35%;\n                text-align: left;\n                padding-right: 20px;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <div class=\"productivity-container\">\n            <h1>Productivity Information</h1>\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%</div>\n        </div>\n        <div class=\"chart-container\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'].get(date, {'count': 0, 'lines': 0})['count'] + events_by_date['suggestion'].get(date, {'count': 0, 'lines': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, {'count': 0})['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'].get(date, {'lines': 0})['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876220683,
    "event": "acceptance",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                padding: 20px;\n                display: flex;\n                justify-content: space-between;\n            }}\n            .chart-container {{\n                width: 60%;\n                text-align: left;\n            }}\n            .productivity-container {{\n                width: 35%;\n                text-align: left;\n                padding-right: 20px;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <div class=\"productivity-container\">\n            <h1>Productivity Information</h1>\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%</div>\n        </div>\n        <div class=\"chart-container\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'].get(date, {'count': 0, 'lines': 0})['count'] + events_by_date['suggestion'].get(date, {'count': 0, 'lines': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, {'count': 0})['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'].get(date, {'lines': 0})['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876269176,
    "event": "suggestion",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                padding: 20px;\n                display: flex;\n                justify-content: space-between;\n            }}\n            .chart-container {{\n                width: 60%;\n                text-align: left;\n            }}\n            .productivity-container {{\n                width: 35%;\n                text-align: left;\n                padding-right: 20px;\n                border-right: 2px solid #ccc; /* Add a border for separation */\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <div class=\"productivity-container\">\n            <h1>Productivity Information</h1>\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">\n                Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%\n            </div>\n        </div>\n        <div class=\"chart-container\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">\n                    Productivity: {productivity_by_date:.2f}%\n                </div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876269808,
    "event": "acceptance",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                padding: 20px;\n                display: flex;\n                justify-content: space-between;\n            }}\n            .chart-container {{\n                width: 60%;\n                text-align: left;\n            }}\n            .productivity-container {{\n                width: 35%;\n                text-align: left;\n                padding-right: 20px;\n                border-right: 2px solid #ccc; /* Add a border for separation */\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <div class=\"productivity-container\">\n            <h1>Productivity Information</h1>\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">\n                Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%\n            </div>\n        </div>\n        <div class=\"chart-container\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">\n                    Productivity: {productivity_by_date:.2f}%\n                </div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876272249,
    "event": "acceptance",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                padding: 20px;\n                display: flex;\n                justify-content: space-between;\n            }}\n            .chart-container {{\n                width: 60%;\n                text-align: left;\n            }}\n            .productivity-container {{\n                width: 35%;\n                text-align: left;\n                padding-right: 20px;\n                border-right: 2px solid #ccc; /* Add a border for separation */\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <div class=\"productivity-container\">\n            <h1>Productivity Information</h1>\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">\n                Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%\n            </div>\n        </div>\n        <div class=\"chart-container\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">\n                    Productivity: {productivity_by_date:.2f}%\n                </div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876312314,
    "event": "suggestion",
    "code": "#"
  },
  {
    "timestamp": 1723876328522,
    "event": "suggestion",
    "code": " # Example usage"
  },
  {
    "timestamp": 1723876329209,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723876335959,
    "event": "acceptance",
    "code": "# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                padding: 20px;\n                display: flex;\n                justify-content: space-between;\n            }}\n            .chart-container {{\n                width: 60%;\n                text-align: left;\n            }}\n            .productivity-container {{\n                width: 35%;\n                text-align: left;\n                padding-right: 20px;\n                border-right: 2px solid #ccc; /* Add a border for separation */\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <div class=\"productivity-container\">\n            <h1>Productivity Information</h1>\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">\n                Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%\n            </div>\n        </div>\n        <div class=\"chart-container\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">\n                    Productivity: {productivity_by_date:.2f}%\n                </div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n"
  },
  {
    "timestamp": 1723876387482,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code_lines = entry['code'].count('\\n') + 1  # Count lines of code\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = {'count': 0, 'lines': 0}\n            events_by_date[event_type][date_str]['count'] += 1\n            events_by_date[event_type][date_str]['lines'] += code_lines\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Total Acceptance Events: {counts['acceptance']}</p>\n            <p>Total Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723876387570,
    "event": "suggestion",
    "code": "\nimport json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code_lines = entry['code'].count('\\n') + 1  # Count lines of code\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = {'count': 0, 'lines': 0}\n            events_by_date[event_type][date_str]['count'] += 1\n            events_by_date[event_type][date_str]['lines'] += code_lines\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Total Acceptance Events: {counts['acceptance']}</p>\n            <p>Total Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1723876491052,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723947559171,
    "event": "suggestion",
    "code": "#"
  },
  {
    "timestamp": 1723947566111,
    "event": "suggestion",
    "code": " Suugest a code for appium "
  },
  {
    "timestamp": 1723947567158,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723947568168,
    "event": "suggestion",
    "code": "# Suugest a code for appium testing\n"
  },
  {
    "timestamp": 1723947569702,
    "event": "suggestion",
    "code": "#"
  },
  {
    "timestamp": 1723947571087,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723947572100,
    "event": "suggestion",
    "code": " # Path: test.py\n"
  },
  {
    "timestamp": 1723947572676,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723947573684,
    "event": "suggestion",
    "code": "# Compare this snippet from cometreport.py:\n"
  },
  {
    "timestamp": 1723947574346,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723947575356,
    "event": "suggestion",
    "code": "#                 width: {counts['acceptance'] / total_events * max_width}px;\n"
  },
  {
    "timestamp": 1723947577303,
    "event": "suggestion",
    "code": "de"
  },
  {
    "timestamp": 1723947578277,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723947579776,
    "event": "suggestion",
    "code": "f\n "
  },
  {
    "timestamp": 1723947582010,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723947582308,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1723947583189,
    "event": "acceptance",
    "code": "# Suugest a code for appium testing\n# Path: test.py\n# Compare this snippet from cometreport.py:\n#                 width: {counts['acceptance'] / total_events * max_width}px;\ndef test():\n\n    "
  },
  {
    "timestamp": 1723947583313,
    "event": "suggestion",
    "code": "def test():\n    \n    "
  },
  {
    "timestamp": 1724296875609,
    "event": "suggestion",
    "code": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\n\nvoid main() {\n  runApp(TodoListApp());\n}\n\nclass TodoListApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ChangeNotifierProvider(\n      create: (context) => TaskData(),\n      child: MaterialApp(\n        home: TaskScreen(),\n      ),\n    );\n  }\n}\n\nclass TaskData extends ChangeNotifier {\n  List<Task> tasks = [];\n\n  void addTask(String newTaskTitle) {\n    final task = Task(name: newTaskTitle);\n    tasks.add(task);\n    notifyListeners();\n  }\n\n  void updateTask(Task task) {\n    task.toggleDone();\n    notifyListeners();\n  }\n\n  void deleteTask(Task task) {\n    tasks.remove(task);\n    notifyListeners();\n  }\n}\n\nclass Task {\n  final String name;\n  bool isDone;\n\n  Task({required this.name, this.isDone = false});\n\n  void toggleDone() {\n    isDone = !isDone;\n  }\n}\n\nclass TaskScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('To-do List'),\n      ),\n      body: Column(\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: [\n          Expanded(\n            child: TaskList(),\n          ),\n          Padding(\n            padding: const EdgeInsets.all(16.0),\n            child: AddTaskButton(),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass TaskList extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Consumer<TaskData>(\n      builder: (context, taskData, child) {\n        return ListView.builder(\n          itemBuilder: (context, index) {\n            final task = taskData.tasks[index];\n            return TaskTile(\n              taskTitle: task.name,\n              isChecked: task.isDone,\n              checkboxCallback: (checkboxState) {\n                taskData.updateTask(task);\n              },\n              longPressCallback: () {\n                taskData.deleteTask(task);\n              },\n            );\n          },\n          itemCount: taskData.tasks.length,\n        );\n      },\n    );\n  }\n}\n\nclass TaskTile extends StatelessWidget {\n  final String taskTitle;\n  final bool isChecked;\n  final void Function(bool?) checkboxCallback;\n  final void Function() longPressCallback;\n\n  TaskTile(\n      {required this.taskTitle,\n      required this.isChecked,\n      required this.checkboxCallback,\n      required this.longPressCallback});\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      title: Text(\n        taskTitle,\n        style: TextStyle(\n          decoration: isChecked ? TextDecoration.lineThrough : null,\n        ),\n      ),\n      trailing: Checkbox(\n        value: isChecked,\n        onChanged: checkboxCallback,\n      ),\n      onLongPress: longPressCallback,\n    );\n  }\n}\n\nclass AddTaskButton extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      child: Text('Add Task'),\n      onPressed: () {\n        showModalBottomSheet(\n          context: context,\n          builder: (context) => AddTaskScreen(),\n        );\n      },\n    );\n  }\n}\n\nclass AddTaskScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    String newTaskTitle = '';\n\n    return Container(\n      padding: EdgeInsets.all(16.0),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: [\n          TextField(\n            autofocus: true,\n            onChanged: (newText) {\n              newTaskTitle = newText;\n            },\n          ),\n          SizedBox(height: 10.0),\n          ElevatedButton(\n            child: Text('Add'),\n            onPressed: () {\n              if (newTaskTitle.isNotEmpty) {\n                Provider.of<TaskData>(context, listen: false)\n                    .addTask(newTaskTitle);\n                Navigator.pop(context);\n              }\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "timestamp": 1724296876501,
    "event": "acceptance",
    "code": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\n\nvoid main() {\n  runApp(TodoListApp());\n}\n\nclass TodoListApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ChangeNotifierProvider(\n      create: (context) => TaskData(),\n      child: MaterialApp(\n        home: TaskScreen(),\n      ),\n    );\n  }\n}\n\nclass TaskData extends ChangeNotifier {\n  List<Task> tasks = [];\n\n  void addTask(String newTaskTitle) {\n    final task = Task(name: newTaskTitle);\n    tasks.add(task);\n    notifyListeners();\n  }\n\n  void updateTask(Task task) {\n    task.toggleDone();\n    notifyListeners();\n  }\n\n  void deleteTask(Task task) {\n    tasks.remove(task);\n    notifyListeners();\n  }\n}\n\nclass Task {\n  final String name;\n  bool isDone;\n\n  Task({required this.name, this.isDone = false});\n\n  void toggleDone() {\n    isDone = !isDone;\n  }\n}\n\nclass TaskScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('To-do List'),\n      ),\n      body: Column(\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: [\n          Expanded(\n            child: TaskList(),\n          ),\n          Padding(\n            padding: const EdgeInsets.all(16.0),\n            child: AddTaskButton(),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass TaskList extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Consumer<TaskData>(\n      builder: (context, taskData, child) {\n        return ListView.builder(\n          itemBuilder: (context, index) {\n            final task = taskData.tasks[index];\n            return TaskTile(\n              taskTitle: task.name,\n              isChecked: task.isDone,\n              checkboxCallback: (checkboxState) {\n                taskData.updateTask(task);\n              },\n              longPressCallback: () {\n                taskData.deleteTask(task);\n              },\n            );\n          },\n          itemCount: taskData.tasks.length,\n        );\n      },\n    );\n  }\n}\n\nclass TaskTile extends StatelessWidget {\n  final String taskTitle;\n  final bool isChecked;\n  final void Function(bool?) checkboxCallback;\n  final void Function() longPressCallback;\n\n  TaskTile(\n      {required this.taskTitle,\n      required this.isChecked,\n      required this.checkboxCallback,\n      required this.longPressCallback});\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      title: Text(\n        taskTitle,\n        style: TextStyle(\n          decoration: isChecked ? TextDecoration.lineThrough : null,\n        ),\n      ),\n      trailing: Checkbox(\n        value: isChecked,\n        onChanged: checkboxCallback,\n      ),\n      onLongPress: longPressCallback,\n    );\n  }\n}\n\nclass AddTaskButton extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      child: Text('Add Task'),\n      onPressed: () {\n        showModalBottomSheet(\n          context: context,\n          builder: (context) => AddTaskScreen(),\n        );\n      },\n    );\n  }\n}\n\nclass AddTaskScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    String newTaskTitle = '';\n\n    return Container(\n      padding: EdgeInsets.all(16.0),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: [\n          TextField(\n            autofocus: true,\n            onChanged: (newText) {\n              newTaskTitle = newText;\n            },\n          ),\n          SizedBox(height: 10.0),\n          ElevatedButton(\n            child: Text('Add'),\n            onPressed: () {\n              if (newTaskTitle.isNotEmpty) {\n                Provider.of<TaskData>(context, listen: false)\n                    .addTask(newTaskTitle);\n                Navigator.pop(context);\n              }\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "timestamp": 1724296897204,
    "event": "acceptance",
    "code": "import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\n\nvoid main() {\n  runApp(TodoListApp());\n}\n\nclass TodoListApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ChangeNotifierProvider(\n      create: (context) => TaskData(),\n      child: MaterialApp(\n        home: TaskScreen(),\n      ),\n    );\n  }\n}\n\nclass TaskData extends ChangeNotifier {\n  List<Task> tasks = [];\n\n  void addTask(String newTaskTitle) {\n    final task = Task(name: newTaskTitle);\n    tasks.add(task);\n    notifyListeners();\n  }\n\n  void updateTask(Task task) {\n    task.toggleDone();\n    notifyListeners();\n  }\n\n  void deleteTask(Task task) {\n    tasks.remove(task);\n    notifyListeners();\n  }\n}\n\nclass Task {\n  final String name;\n  bool isDone;\n\n  Task({required this.name, this.isDone = false});\n\n  void toggleDone() {\n    isDone = !isDone;\n  }\n}\n\nclass TaskScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('To-do List'),\n      ),\n      body: Column(\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: [\n          Expanded(\n            child: TaskList(),\n          ),\n          Padding(\n            padding: const EdgeInsets.all(16.0),\n            child: AddTaskButton(),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass TaskList extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Consumer<TaskData>(\n      builder: (context, taskData, child) {\n        return ListView.builder(\n          itemBuilder: (context, index) {\n            final task = taskData.tasks[index];\n            return TaskTile(\n              taskTitle: task.name,\n              isChecked: task.isDone,\n              checkboxCallback: (checkboxState) {\n                taskData.updateTask(task);\n              },\n              longPressCallback: () {\n                taskData.deleteTask(task);\n              },\n            );\n          },\n          itemCount: taskData.tasks.length,\n        );\n      },\n    );\n  }\n}\n\nclass TaskTile extends StatelessWidget {\n  final String taskTitle;\n  final bool isChecked;\n  final void Function(bool?) checkboxCallback;\n  final void Function() longPressCallback;\n\n  TaskTile(\n      {required this.taskTitle,\n      required this.isChecked,\n      required this.checkboxCallback,\n      required this.longPressCallback});\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      title: Text(\n        taskTitle,\n        style: TextStyle(\n          decoration: isChecked ? TextDecoration.lineThrough : null,\n        ),\n      ),\n      trailing: Checkbox(\n        value: isChecked,\n        onChanged: checkboxCallback,\n      ),\n      onLongPress: longPressCallback,\n    );\n  }\n}\n\nclass AddTaskButton extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      child: Text('Add Task'),\n      onPressed: () {\n        showModalBottomSheet(\n          context: context,\n          builder: (context) => AddTaskScreen(),\n        );\n      },\n    );\n  }\n}\n\nclass AddTaskScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    String newTaskTitle = '';\n\n    return Container(\n      padding: EdgeInsets.all(16.0),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: [\n          TextField(\n            autofocus: true,\n            onChanged: (newText) {\n              newTaskTitle = newText;\n            },\n          ),\n          SizedBox(height: 10.0),\n          ElevatedButton(\n            child: Text('Add'),\n            onPressed: () {\n              if (newTaskTitle.isNotEmpty) {\n                Provider.of<TaskData>(context, listen: false)\n                    .addTask(newTaskTitle);\n                Navigator.pop(context);\n              }\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "timestamp": 1724297305819,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724297305969,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724297307678,
    "event": "suggestion",
    "code": "\n  \n  dependencies:\n  flutter:\n    sdk: flutter\n  provider: ^6.0.5\n"
  },
  {
    "timestamp": 1724297308391,
    "event": "acceptance",
    "code": "name: todo_list_app\ndescription: \"A new Flutter project.\"\n# The following line prevents the package from being accidentally published to\n# pub.dev using `flutter pub publish`. This is preferred for private packages.\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\n\n# The following defines the version and build number for your application.\n# A version number is three numbers separated by dots, like 1.2.43\n# followed by an optional build number separated by a +.\n# Both the version and the builder number may be overridden in flutter\n# build by specifying --build-name and --build-number, respectively.\n# In Android, build-name is used as versionName while build-number used as versionCode.\n# Read more about Android versioning at https://developer.android.com/studio/publish/versioning\n# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.\n# Read more about iOS versioning at\n# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html\n# In Windows, build-name is used as the major, minor, and patch parts\n# of the product and file versions while build-number is used as the build suffix.\nversion: 1.0.0+1\n\nenvironment:\n  sdk: ^3.5.1\n\n# Dependencies specify other packages that your package needs in order to work.\n# To automatically upgrade your package dependencies to the latest versions\n# consider running `flutter pub upgrade --major-versions`. Alternatively,\n# dependencies can be manually updated by changing the version numbers below to\n# the latest version available on pub.dev. To see which dependencies have newer\n# versions available, run `flutter pub outdated`.\ndependencies:\n  flutter:\n    sdk: flutter\n\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^1.0.8\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\n  # The \"flutter_lints\" package below contains a set of recommended lints to\n  # encourage good coding practices. The lint set provided by the package is\n  # activated in the `analysis_options.yaml` file located at the root of your\n  # package. See that file for information about deactivating specific lint\n  # rules and activating additional ones.\n  flutter_lints: ^4.0.0\n\n# For information on the generic Dart part of this file, see the\n# following page: https://dart.dev/tools/pub/pubspec\n\n# The following section is specific to Flutter packages.\nflutter:\n\n  # The following line ensures that the Material Icons font is\n  # included with your application, so that you can use the icons in\n  # the material Icons class.\n  uses-material-design: true\n\n  # To add assets to your application, add an assets section, like this:\n  # assets:\n  #   - images/a_dot_burr.jpeg\n  #   - images/a_dot_ham.jpeg\n\n  # An image asset can refer to one or more resolution-specific \"variants\", see\n  # https://flutter.dev/to/resolution-aware-images\n\n  # For details regarding adding assets from package dependencies, see\n  # https://flutter.dev/to/asset-from-package\n\n  # To add custom fonts to your application, add a fonts section here,\n  # in this \"flutter\" section. Each entry in this list should have a\n  # \"family\" key with the font family name, and a \"fonts\" key with a\n  # list giving the asset and other descriptors for the font. For\n  # example:\n  # fonts:\n  #   - family: Schyler\n  #     fonts:\n  #       - asset: fonts/Schyler-Regular.ttf\n  #       - asset: fonts/Schyler-Italic.ttf\n  #         style: italic\n  #   - family: Trajan Pro\n  #     fonts:\n  #       - asset: fonts/TrajanPro.ttf\n  #       - asset: fonts/TrajanPro_Bold.ttf\n  #         weight: 700\n  #\n  # For details regarding fonts from package dependencies,\n  # see https://flutter.dev/to/font-from-package\n\n  dependencies:\n  flutter:\n    sdk: flutter\n  provider: ^6.0.5\n\n"
  },
  {
    "timestamp": 1724297370039,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724297372768,
    "event": "suggestion",
    "code": "\n    flutter:\n    sdk: flutter\n  provider: ^6.0.5"
  },
  {
    "timestamp": 1724297376137,
    "event": "acceptance",
    "code": "name: todo_list_app\ndescription: \"A new Flutter project.\"\n# The following line prevents the package from being accidentally published to\n# pub.dev using `flutter pub publish`. This is preferred for private packages.\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\n\n# The following defines the version and build number for your application.\n# A version number is three numbers separated by dots, like 1.2.43\n# followed by an optional build number separated by a +.\n# Both the version and the builder number may be overridden in flutter\n# build by specifying --build-name and --build-number, respectively.\n# In Android, build-name is used as versionName while build-number used as versionCode.\n# Read more about Android versioning at https://developer.android.com/studio/publish/versioning\n# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.\n# Read more about iOS versioning at\n# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html\n# In Windows, build-name is used as the major, minor, and patch parts\n# of the product and file versions while build-number is used as the build suffix.\nversion: 1.0.0+1\n\nenvironment:\n  sdk: ^3.5.1\n\n# Dependencies specify other packages that your package needs in order to work.\n# To automatically upgrade your package dependencies to the latest versions\n# consider running `flutter pub upgrade --major-versions`. Alternatively,\n# dependencies can be manually updated by changing the version numbers below to\n# the latest version available on pub.dev. To see which dependencies have newer\n# versions available, run `flutter pub outdated`.\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter:\n    sdk: flutter\n  provider: ^6.0.5\n\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^1.0.8\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\n  # The \"flutter_lints\" package below contains a set of recommended lints to\n  # encourage good coding practices. The lint set provided by the package is\n  # activated in the `analysis_options.yaml` file located at the root of your\n  # package. See that file for information about deactivating specific lint\n  # rules and activating additional ones.\n  flutter_lints: ^4.0.0\n\n# For information on the generic Dart part of this file, see the\n# following page: https://dart.dev/tools/pub/pubspec\n\n# The following section is specific to Flutter packages.\nflutter:\n\n  # The following line ensures that the Material Icons font is\n  # included with your application, so that you can use the icons in\n  # the material Icons class.\n  uses-material-design: true\n\n  # To add assets to your application, add an assets section, like this:\n  # assets:\n  #   - images/a_dot_burr.jpeg\n  #   - images/a_dot_ham.jpeg\n\n  # An image asset can refer to one or more resolution-specific \"variants\", see\n  # https://flutter.dev/to/resolution-aware-images\n\n  # For details regarding adding assets from package dependencies, see\n  # https://flutter.dev/to/asset-from-package\n\n  # To add custom fonts to your application, add a fonts section here,\n  # in this \"flutter\" section. Each entry in this list should have a\n  # \"family\" key with the font family name, and a \"fonts\" key with a\n  # list giving the asset and other descriptors for the font. For\n  # example:\n  # fonts:\n  #   - family: Schyler\n  #     fonts:\n  #       - asset: fonts/Schyler-Regular.ttf\n  #       - asset: fonts/Schyler-Italic.ttf\n  #         style: italic\n  #   - family: Trajan Pro\n  #     fonts:\n  #       - asset: fonts/TrajanPro.ttf\n  #       - asset: fonts/TrajanPro_Bold.ttf\n  #         weight: 700\n  #\n  # For details regarding fonts from package dependencies,\n  # see https://flutter.dev/to/font-from-package\n\n\n\n"
  },
  {
    "timestamp": 1724297400865,
    "event": "suggestion",
    "code": "dependencies:\n  flutter:\n    sdk: flutter\n  provider: ^6.0.5\n"
  },
  {
    "timestamp": 1724297401011,
    "event": "acceptance",
    "code": "name: todo_list_app\ndescription: \"A new Flutter project.\"\n# The following line prevents the package from being accidentally published to\n# pub.dev using `flutter pub publish`. This is preferred for private packages.\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\n\n# The following defines the version and build number for your application.\n# A version number is three numbers separated by dots, like 1.2.43\n# followed by an optional build number separated by a +.\n# Both the version and the builder number may be overridden in flutter\n# build by specifying --build-name and --build-number, respectively.\n# In Android, build-name is used as versionName while build-number used as versionCode.\n# Read more about Android versioning at https://developer.android.com/studio/publish/versioning\n# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.\n# Read more about iOS versioning at\n# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html\n# In Windows, build-name is used as the major, minor, and patch parts\n# of the product and file versions while build-number is used as the build suffix.\nversion: 1.0.0+1\n\nenvironment:\n  sdk: ^3.5.1\n\n# Dependencies specify other packages that your package needs in order to work.\n# To automatically upgrade your package dependencies to the latest versions\n# consider running `flutter pub upgrade --major-versions`. Alternatively,\n# dependencies can be manually updated by changing the version numbers below to\n# the latest version available on pub.dev. To see which dependencies have newer\n# versions available, run `flutter pub outdated`.\ndependencies:\n  flutter:\n    sdk: flutter\n  provider: ^6.0.5\n\n\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^1.0.8\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\n  # The \"flutter_lints\" package below contains a set of recommended lints to\n  # encourage good coding practices. The lint set provided by the package is\n  # activated in the `analysis_options.yaml` file located at the root of your\n  # package. See that file for information about deactivating specific lint\n  # rules and activating additional ones.\n  flutter_lints: ^4.0.0\n\n# For information on the generic Dart part of this file, see the\n# following page: https://dart.dev/tools/pub/pubspec\n\n# The following section is specific to Flutter packages.\nflutter:\n\n  # The following line ensures that the Material Icons font is\n  # included with your application, so that you can use the icons in\n  # the material Icons class.\n  uses-material-design: true\n\n  # To add assets to your application, add an assets section, like this:\n  # assets:\n  #   - images/a_dot_burr.jpeg\n  #   - images/a_dot_ham.jpeg\n\n  # An image asset can refer to one or more resolution-specific \"variants\", see\n  # https://flutter.dev/to/resolution-aware-images\n\n  # For details regarding adding assets from package dependencies, see\n  # https://flutter.dev/to/asset-from-package\n\n  # To add custom fonts to your application, add a fonts section here,\n  # in this \"flutter\" section. Each entry in this list should have a\n  # \"family\" key with the font family name, and a \"fonts\" key with a\n  # list giving the asset and other descriptors for the font. For\n  # example:\n  # fonts:\n  #   - family: Schyler\n  #     fonts:\n  #       - asset: fonts/Schyler-Regular.ttf\n  #       - asset: fonts/Schyler-Italic.ttf\n  #         style: italic\n  #   - family: Trajan Pro\n  #     fonts:\n  #       - asset: fonts/TrajanPro.ttf\n  #       - asset: fonts/TrajanPro_Bold.ttf\n  #         weight: 700\n  #\n  # For details regarding fonts from package dependencies,\n  # see https://flutter.dev/to/font-from-package\n\n\n\n"
  },
  {
    "timestamp": 1724306216116,
    "event": "suggestion",
    "code": "// "
  },
  {
    "timestamp": 1724306221198,
    "event": "suggestion",
    "code": "##  Suggest a "
  },
  {
    "timestamp": 1724306226409,
    "event": "suggestion",
    "code": "flutter code "
  },
  {
    "timestamp": 1724306236375,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724306239578,
    "event": "suggestion",
    "code": " \ndef "
  },
  {
    "timestamp": 1724306277159,
    "event": "suggestion",
    "code": "WDef def "
  },
  {
    "timestamp": 1724306281019,
    "event": "suggestion",
    "code": "# "
  },
  {
    "timestamp": 1724306285697,
    "event": "suggestion",
    "code": "Suugest "
  },
  {
    "timestamp": 1724306290818,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724306303885,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724306303890,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code_lines = entry['code'].count('\\n') + 1  # Count lines of code\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = {'count': 0, 'lines': 0}\n            events_by_date[event_type][date_str]['count'] += 1\n            events_by_date[event_type][date_str]['lines'] += code_lines\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Total Acceptance Events: {counts['acceptance']}</p>\n            <p>Total Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n    \n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1724307332368,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724307332521,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724307334131,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724307335136,
    "event": "suggestion",
    "code": "\n\n# Output:\n"
  },
  {
    "timestamp": 1724307374999,
    "event": "suggestion",
    "code": "orage/tata consultancy services.comet-metrics-logger/"
  },
  {
    "timestamp": 1724307377158,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        code_lines = entry['code'].count('\\n') + 1  # Count lines in the code\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars and a line chart\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Prepare data for the line chart\n    dates = sorted(events_by_date['acceptance'].keys())\n    productivity_data = []\n    labels = []\n    \n    for date in dates:\n        total_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n        else:\n            productivity_by_date = 0\n        labels.append(date)\n        productivity_data.append(productivity_by_date)\n    \n    # Generate HTML content with CSS-styled bars and Chart.js line chart\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                padding: 20px;\n                display: flex;\n                justify-content: space-between;\n            }}\n            .chart-container {{\n                width: 60%;\n                text-align: left;\n            }}\n            .productivity-container {{\n                width: 35%;\n                text-align: left;\n                padding-right: 20px;\n                border-right: 2px solid #ccc; /* Add a border for separation */\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n            .chart-container {{\n                margin-top: 20px;\n            }}\n            .productivity-header {{\n                color: grey;\n            }}\n        </style>\n        <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    </head>\n    <body>\n        <div class=\"productivity-container\">\n            <h1>Event Statistics</h1>\n            <h1 class=\"productivity-header\">Productivity Information</h1>\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">\n                Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%\n            </div>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n            <p>Total Lines: {lines['acceptance'] + lines['suggestion']}</p>\n        </div>\n        <div class=\"chart-container\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">\n                    Productivity: {productivity_by_date:.2f}%\n                </div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n\n    # Close HTML content and add the line chart\n    html_content += f\"\"\"\n            <h2>Productivity Trend Over Time</h2>\n            <canvas id=\"productivityChart\" width=\"400\" height=\"200\"></canvas>\n            <script>\n                const ctx = document.getElementById('productivityChart').getContext('2d');\n                new Chart(ctx, {{\n                    type: 'line',\n                    data: {{\n                        labels: {json.dumps(labels)},\n                        datasets: [{{\n                            label: 'Productivity (%)',\n                            data: {json.dumps(productivity_data)},\n                            borderColor: '#2196F3',\n                            backgroundColor: 'rgba(33, 150, 243, 0.2)',\n                            borderWidth: 2\n                        }}]\n                    }},\n                    options: {{\n                        scales: {{\n                            x: {{\n                                beginAtZero: true\n                            }},\n                            y: {{\n                                beginAtZero: true,\n                                ticks: {{\n                                    callback: function(value) {{\n                                        return value + '%';\n                                    }}\n                                }}\n                            }}\n                        }},\n                        plugins: {{\n                            legend: {{\n                                display: true\n                            }}\n                        }}\n                    }}\n                }});\n            </script>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/orage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1724307482486,
    "event": "suggestion",
    "code": "/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json"
  },
  {
    "timestamp": 1724307483060,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        code_lines = entry['code'].count('\\n') + 1  # Count lines in the code\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars and a line chart\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Prepare data for the line chart\n    dates = sorted(events_by_date['acceptance'].keys())\n    productivity_data = []\n    labels = []\n    \n    for date in dates:\n        total_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n        else:\n            productivity_by_date = 0\n        labels.append(date)\n        productivity_data.append(productivity_by_date)\n    \n    # Generate HTML content with CSS-styled bars and Chart.js line chart\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                padding: 20px;\n                display: flex;\n                justify-content: space-between;\n            }}\n            .chart-container {{\n                width: 60%;\n                text-align: left;\n            }}\n            .productivity-container {{\n                width: 35%;\n                text-align: left;\n                padding-right: 20px;\n                border-right: 2px solid #ccc; /* Add a border for separation */\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n                margin-top: 10px;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n            .chart-container {{\n                margin-top: 20px;\n            }}\n            .productivity-header {{\n                color: grey;\n            }}\n        </style>\n        <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    </head>\n    <body>\n        <div class=\"productivity-container\">\n            <h1>Event Statistics</h1>\n            <h1 class=\"productivity-header\">Productivity Information</h1>\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n            <div class=\"bar productivity-bar\" style=\"width: {counts['acceptance'] / total_events * max_width}px;\">\n                Productivity: {((counts['acceptance'] / total_events) * 100):.2f}%\n            </div>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n            <p>Total Lines: {lines['acceptance'] + lines['suggestion']}</p>\n        </div>\n        <div class=\"chart-container\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'].get(date, 0) / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'].get(date, 0) + events_by_date['suggestion'].get(date, 0)\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">\n                    Productivity: {productivity_by_date:.2f}%\n                </div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n\n    # Close HTML content and add the line chart\n    html_content += f\"\"\"\n            <h2>Productivity Trend Over Time</h2>\n            <canvas id=\"productivityChart\" width=\"400\" height=\"200\"></canvas>\n            <script>\n                const ctx = document.getElementById('productivityChart').getContext('2d');\n                new Chart(ctx, {{\n                    type: 'line',\n                    data: {{\n                        labels: {json.dumps(labels)},\n                        datasets: [{{\n                            label: 'Productivity (%)',\n                            data: {json.dumps(productivity_data)},\n                            borderColor: '#2196F3',\n                            backgroundColor: 'rgba(33, 150, 243, 0.2)',\n                            borderWidth: 2\n                        }}]\n                    }},\n                    options: {{\n                        scales: {{\n                            x: {{\n                                beginAtZero: true\n                            }},\n                            y: {{\n                                beginAtZero: true,\n                                ticks: {{\n                                    callback: function(value) {{\n                                        return value + '%';\n                                    }}\n                                }}\n                            }}\n                        }},\n                        plugins: {{\n                            legend: {{\n                                display: true\n                            }}\n                        }}\n                    }}\n                }});\n            </script>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n"
  },
  {
    "timestamp": 1724307541218,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724307541415,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724307553186,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724307554194,
    "event": "suggestion",
    "code": "\n\n# Output: Test has been run\n"
  },
  {
    "timestamp": 1724307562013,
    "event": "suggestion",
    "code": "# "
  },
  {
    "timestamp": 1724307566068,
    "event": "suggestion",
    "code": "Code fo r "
  },
  {
    "timestamp": 1724307571103,
    "event": "suggestion",
    "code": "adding two"
  },
  {
    "timestamp": 1724307572607,
    "event": "suggestion",
    "code": "# Code for adding two numbers"
  },
  {
    "timestamp": 1724307575241,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724307576277,
    "event": "suggestion",
    "code": " andf  # Code for adding two numbers and returning the sum\n"
  },
  {
    "timestamp": 1724307580953,
    "event": "suggestion",
    "code": "def add(a,"
  },
  {
    "timestamp": 1724307587682,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724307589145,
    "event": "acceptance",
    "code": "# Suggest a code to run the test.py file and check the output.\ndef test():\n    print(\"Test has been run\")\n    pass\n\ntest()\n\n# Output: Test has been run\n# Code for adding two numbers and returning the sum\ndef add(a, b):\n    return a + b\n"
  },
  {
    "timestamp": 1724307634941,
    "event": "acceptance",
    "code": "import json\nimport os\nfrom datetime import datetime\n\n# Function to read JSON and count events with date conversion\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        code_lines = entry['code'].count('\\n') + 1  # Count lines of code\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = {'count': 0, 'lines': 0}\n            events_by_date[event_type][date_str]['count'] += 1\n            events_by_date[event_type][date_str]['lines'] += code_lines\n    \n    return counts, lines, events_by_date\n\n# Function to generate HTML with CSS-styled horizontal bars\ndef generate_html(html_file_path, counts, lines, events_by_date):\n    # Calculate total events\n    total_events = counts['acceptance'] + counts['suggestion']\n    \n    # Define maximum width for the bars in pixels\n    max_width = 400  \n    \n    # Generate HTML content with CSS-styled bars\n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Event Statistics</title>\n        <style>\n            body {{\n                font-family: Arial, sans-serif;\n                text-align: center;\n                padding: 20px;\n            }}\n            .chart-container {{\n                margin: auto;\n                width: 60%;\n                text-align: left;\n            }}\n            .bar {{\n                height: 30px;\n                margin-bottom: 10px;\n                color: white;\n                text-align: right;\n                line-height: 30px;\n                padding-right: 10px;\n                border-radius: 5px;\n            }}\n            .acceptance-bar {{\n                background-color: #4CAF50;\n                width: {counts['acceptance'] / total_events * max_width}px;\n            }}\n            .suggestion-bar {{\n                background-color: #FF5722;\n                width: {counts['suggestion'] / total_events * max_width}px;\n            }}\n            .productivity-bar {{\n                background-color: #2196F3;\n            }}\n            .events {{\n                margin-top: 20px;\n                text-align: left;\n                display: inline-block;\n            }}\n            .event-category {{\n                margin-bottom: 20px;\n            }}\n        </style>\n    </head>\n    <body>\n        <h1>Event Statistics</h1>\n        <div class=\"chart-container\">\n            <div class=\"bar acceptance-bar\">Acceptance: {counts['acceptance']}</div>\n            <div class=\"bar suggestion-bar\">Suggestion: {counts['suggestion']}</div>\n        </div>\n        <div class=\"productivity\">\n            <h2>Productivity</h2>\n            <p>Total Acceptance Events: {counts['acceptance']}</p>\n            <p>Total Suggestion Events: {counts['suggestion']}</p>\n            <p>Total Events: {total_events}</p>\n            <p>Total Lines (Acceptance): {lines['acceptance']}</p>\n            <p>Total Lines (Suggestion): {lines['suggestion']}</p>\n        </div>\n        <div class=\"events\">\n            <h2>Events by Date</h2>\n    \"\"\"\n\n    # Generate bars for productivity percentage by date and lines of code\n    for date in events_by_date['acceptance'].keys():\n        total_by_date = events_by_date['acceptance'][date]['count'] + events_by_date['suggestion'].get(date, {'count': 0})['count']\n        if total_by_date > 0:\n            productivity_by_date = (events_by_date['acceptance'][date]['count'] / total_by_date) * 100\n            productivity_width = (productivity_by_date / 100) * max_width\n            lines_by_date = events_by_date['acceptance'][date]['lines'] + events_by_date['suggestion'].get(date, {'lines': 0})['lines']\n            html_content += f\"\"\"\n            <div class=\"event-category\">\n                <h3>{date}</h3>\n                <div class=\"bar productivity-bar\" style=\"width: {productivity_width}px;\">Productivity: {productivity_by_date:.2f}%</div>\n                <p>Total Lines: {lines_by_date}</p>\n            </div>\n            \"\"\"\n    \n    # Close HTML content\n    html_content += \"\"\"\n        </div>\n    </body>\n    </html>\n    \"\"\"\n\n    with open(html_file_path, 'w') as file:\n        file.write(html_content)\n\n# Main function to process JSON and generate HTML\ndef main():\n    # Paths to your JSON file and HTML output\n    json_file_path = '/Users/saurabhdubey/Library/Application Support/Code/User/globalStorage/tata consultancy services.comet-metrics-logger/copilot_usage_log/copilot_usage_log.json'\n    html_file_path = os.path.join(os.path.dirname(json_file_path), 'summary.html')\n    \n    counts, lines, events_by_date = count_events(json_file_path)\n    generate_html(html_file_path, counts, lines, events_by_date)\n    print(f'HTML file generated at: {html_file_path}')\n\n\n# Run the main function\nif __name__ == '__main__':\n    main()\n\n\n# Output:\n"
  },
  {
    "timestamp": 1724465304935,
    "event": "suggestion",
    "code": "#"
  },
  {
    "timestamp": 1724465307866,
    "event": "suggestion",
    "code": " Suggest "
  },
  {
    "timestamp": 1724465311266,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465311429,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465313398,
    "event": "suggestion",
    "code": "# Suggest to run this script in the same directory as the data files\n\ndef"
  },
  {
    "timestamp": 1724465320698,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465320914,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465321918,
    "event": "suggestion",
    "code": " def main():\n    # Load the data\n    events = load_data('data.json')\n    # Create a report\n    report = CometReport(events)\n    # Generate the report\n    report.generate_report('report.html')\n    \n    "
  },
  {
    "timestamp": 1724465322961,
    "event": "suggestion",
    "code": "if __name__ == '__main__':"
  },
  {
    "timestamp": 1724465323095,
    "event": "acceptance",
    "code": "# Suggest to run this script in the same directory as the data files\n\ndef main():\n    # Load the data\n    events = load_data('data.json')\n    # Create a report\n    report = CometReport(events)\n    # Generate the report\n    report.generate_report('report.html')\n\nif __name__ == '__main__':"
  },
  {
    "timestamp": 1724465332730,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465332878,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465340326,
    "event": "suggestion",
    "code": "\n    \n    prin"
  },
  {
    "timestamp": 1724465341417,
    "event": "suggestion",
    "code": "print"
  },
  {
    "timestamp": 1724465345838,
    "event": "suggestion",
    "code": "    print('Report generated successfully!')"
  },
  {
    "timestamp": 1724465346158,
    "event": "acceptance",
    "code": "# Suggest to run this script in the same directory as the data files\n\ndef main():\n    # Load the data\n    events = load_data('data.json')\n    # Create a report\n    report = CometReport(events)\n    # Generate the report\n    report.generate_report('report.html')\n\n    print('Report generated successfully!')\n\nif __name__ == '__main__':"
  },
  {
    "timestamp": 1724465499856,
    "event": "suggestion",
    "code": "#"
  },
  {
    "timestamp": 1724465507938,
    "event": "suggestion",
    "code": "def "
  },
  {
    "timestamp": 1724465521184,
    "event": "suggestion",
    "code": "# Suggest  # Suggest to run this script in the same directory as the data files"
  },
  {
    "timestamp": 1724465521379,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465521814,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465523534,
    "event": "suggestion",
    "code": "\n\\\n"
  },
  {
    "timestamp": 1724465523622,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465523762,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465525409,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465526398,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465528193,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465529206,
    "event": "suggestion",
    "code": "\n\nimport json\n\n    import os\n"
  },
  {
    "timestamp": 1724465533542,
    "event": "suggestion",
    "code": "import datetime"
  },
  {
    "timestamp": 1724465539413,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465541765,
    "event": "suggestion",
    "code": "\nimport matplotlib.pyplot as plt"
  },
  {
    "timestamp": 1724465542593,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465549045,
    "event": "acceptance",
    "code": "# Suggest to run this script in the same directory as the data files\n\n\nimport json\nimport os\nimport datetime\nimport matplotlib.pyplot as plt\n"
  },
  {
    "timestamp": 1724465569773,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465570313,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465571321,
    "event": "suggestion",
    "code": "\nimimportimport numpy as np\n\n"
  },
  {
    "timestamp": 1724465572100,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465573103,
    "event": "suggestion",
    "code": "def count_events(json_file_path):\n    "
  },
  {
    "timestamp": 1724465574756,
    "event": "acceptance",
    "code": ""
  },
  {
    "timestamp": 1724465575640,
    "event": "acceptance",
    "code": "# Suggest to run this script in the same directory as the data files\n\n\nimport json\nimport os\nimport datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef count_events(json_file_path):\n    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        code_lines = entry['code'].count('\\n') + 1  # Count lines in the code\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, lines, events_by_date\n"
  },
  {
    "timestamp": 1724465575772,
    "event": "suggestion",
    "code": "    with open(json_file_path, 'r') as file:\n        data = json.load(file)\n    \n    counts = {'acceptance': 0, 'suggestion': 0}\n    lines = {'acceptance': 0, 'suggestion': 0}\n    events_by_date = {'acceptance': {}, 'suggestion': {}}\n    \n    for entry in data:\n        event_type = entry['event']\n        timestamp = entry['timestamp'] / 1000  # Convert to seconds\n        date_str = datetime.datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d')\n        code_lines = entry['code'].count('\\n') + 1  # Count lines in the code\n        \n        if event_type in counts:\n            counts[event_type] += 1\n            lines[event_type] += code_lines\n            if date_str not in events_by_date[event_type]:\n                events_by_date[event_type][date_str] = 0\n            events_by_date[event_type][date_str] += 1\n    \n    return counts, lines, events_by_date\n    "
  }
]